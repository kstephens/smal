#!/usr/bin/env ruby
# -*- ruby -*-
require 'rubygems'
case RUBY_VERSION
when /^1\.9/
  gem 'ruby-debug19'
  require 'ruby-debug'
else
  gem 'ruby-debug'
  require 'ruby-debug'
end

class AssemblyCallGraph
  attr_reader :procedures, :codes_by_label

  def initialize
    @procedures = [ ]
    @obj_by_label = { }
  end

  def parse input = nil
    input ||= $stdin
    @procedure = nil
    @line = 0
    @queued_labels = [ ]
    until input.eof?
      line = input.readline
      @line += 1
      isn = label = opcode = l = dst_label = nil
      case line
      when /^\s*#/
      when /^\s*$/
      when /^\s*\.([a-z_]+)/i
      when /^([a-z0-9_.$]+):/i
        l = $1.to_sym
        isn = Instruction::Label.new
        label = isn
      when /^\s*(jmp)\s+([a-z0-9_]+)/i
        opcode, dst_label = $1, $2.to_sym
        isn = Instruction::Jump.new
      when /^\s*(call)\s+([a-z0-9_]+)/i
        opcode, dst_label = $1, $2.to_sym
        isn = Instruction::Call.new
      when /^\s*(ret)\b/i
        opcode = $1
        isn = Instruction::Return.new
      when /^\s*(j[a-z0-9]+)\s+([a-z0-9_]+)/i
        opcode, dst_label = $1, $2.to_sym
        isn = Instruction::Branch.new
        @next_branch_isn = isn
      else
        isn = Instruction.new
      end

      if isn
        isn.context = self
        isn.line = @line
        isn.isn = line
        isn.label = l if l
        isn.dst_label = dst_label if dst_label
        add_isn(isn)
      end
    end
    @line = -1
    self
  end

  def add_isn isn
    # pp [ :add_isn, isn ]

    # Queue all labels until real instruction.
    case isn
    when Instruction::Label
      @queued_labels << isn
      # isn.global?; pp [ :@labels, @labels ]
    else
      unless @queued_labels.empty?
        # If there is a global label?
        # emit a new Procedure object.
        if @queued_labels.find{|x| x.global?}
          # pp [ :emit_new_code_for, @labels, isn ]
          @procedure = nil
        end
        @queued_labels.each do | label |
          _add_isn(label)
        end
        @queued_labels.clear
      end

      _add_isn(isn)
      
      @branch_isn = @next_branch_isn
      @next_branch_isn = nil

=begin
      if Instruction::Branch === @branch_isn
        @branch_isn.false_isn = code
        @branch_isn = nil
      end
=end
    end

    isn
  end

  def _add_isn isn
    @procedure ||= add_proc(Procedure.new)
    @procedure.add_isn(isn)
    isn
  end
  
  def add_proc p
    p.context = self
    p.line = @line
    @procedures << p
    p
  end
  
  def add_label! label, obj
    raise TypeError unless Symbol === label
    @obj_by_label[label] = obj
    # $stderr.puts "add_label!(#{label}, #{obj.class} #{obj.object_id} #{obj.to_s})"
    self
  end

  def resolve_label label
    raise TypeError unless Symbol === label
    @obj_by_label[label] or 
      add_proc(Procedure.new).add_label!(label).extern!
  end

  module Labels
    def _add_label! label
      raise TypeError unless Symbol === label
      case
      when @labels.empty?
        @labels << label
      when @labels.first.to_s =~ /^_/
        @labels << label
      when label.to_s =~ /^_/
        @labels.unshift label
      else
        @labels << label
      end
      self
    end
    
    def add_label! label
      _add_label! label
      context.add_label!(label, self)
      self
    end
    
    def label
      @labels.first
    end
    
    def global?
      (@globalQ ||= [
                     label.to_s =~ /^_/
                    ]).first
    end
  end
  
  class Region
    attr_accessor :context, :file, :line
    attr_accessor :owner
    attr_reader :lines, :labels, :isns
    attr_accessor :prev, :next

    include Labels

    def initialize
      @queued_labels = [ ]
      @labels = [ ]
      @lines = [ ]
      @isns = [ ]
    end

    def empty?
      @isns.empty?
    end

    def label
      @label ||= 
        super || "l#{@lines.first.line}"
    end

    attr_reader :has_non_label

    def add_isn isn
      @line ||= isn.line
      @lines << isn
      isn.owner = self
      isn.context ||= self.context
      case isn
      when Instruction::Label
        @queued_labels << isn
      else
        unless @has_non_label
          @queued_labels.each do | label |
            _add_label!(label.label)
          end
        end
        @queued_labels.each do | label |
          isn.add_label!(label.label)
        end
        @queued_labels.clear

        # Attach 
        if @isns.empty? and p_region = prev
          case last_isn = p_region.isns[-1]
          when Instruction::Jump, Instruction::Return
          else
            last_isn.next ||= isn
          end
        end

        @isns << isn
        @has_non_label = true 
      end
      isn
    end

    def first_isn
      @first_isn ||= 
        @extern ? self : (@isns.first || self)
    end

    def to_s
      @to_s ||=
        ("%5d R { " % (@line || -1)) << "\n" <<
        (@lines.map{|x| x.to_s} * '' << "\n") <<
        "      } R\n"
    end
  end

  class Procedure < Region
    attr_reader :regions
    def initialize
      super
      @regions = [ ]
    end
    def empty? 
      @regions.empty?
    end

    attr_accessor :extern
    alias :extern? :extern
    def extern!
      @extern = true
      self
    end

    def label
      r = @regions.first and r.label
    end

    def add_label! label
      @region or new_region!
      @region.add_label! label
      self
    end

    def new_region!
      region = Region.new
      region.context = context
      region.owner = self
      region.prev = @region
      @region.next = region if @region
      @regions << region
      @region = region
      region
    end

    def add_isn isn
      # $stderr.puts "@region = #{@region}"
      # debugger
      new_region = ! @region
      last_isn = @region && @region.isns[-1]
      case last_isn
      when Instruction::AbstractJump, Instruction::Return
        new_region = true
      end
      if new_region
        new_region!
      end
      @region.add_isn(isn)
      isn
    end

    def to_s
      @to_s ||=
        (extern? ? "EXTERN #{label}" : "%5d P { " % (@line || -1)) << "\n" <<
        (@regions.map{|x| x.to_s} * '' << "\n") <<
        "      } P"
    end

  end

  class Instruction
    attr_accessor :context, :file, :line, :owner
    attr_accessor :isn
    attr_accessor :prev, :next

    include Labels
    def initialize
      @labels = [ ]
    end

    def to_s
      @to_s ||=
        (
         ("%5d " % @line) <<
         @isn
         ).freeze
    end

    def first_isn
      self
    end

    class Label < self
      attr_accessor :label
    end

    class Flow < self
      attr_accessor :dst_label, :dst_code
      def dst_code
        @dst_code ||= @dst_label && context.resolve_label(@dst_label)
      end
      def to_s
        @to_s ||= 
          super.sub("\n", " # line #{dst_code.first_isn.line} (#{@next && @next.line})\n")
      end
    end

    class AbstractCall < Flow
    end

    class Call < AbstractCall
    end

    class Return < AbstractCall
      def dst_code
        self
      end
    end

    class AbstractJump < Flow
    end

    class Jump < AbstractJump
    end

    class Branch < AbstractJump
      alias :true_label :dst_label
      alias :true_label= :dst_label=
      alias :true_code :dst_code
      alias :true_code= :dst_code=
    end
  end

  def to_dot obj = nil, out = nil, &blk
    obj ||= self
    out ||= $stdout
    case obj
    when AssemblyCallGraph
      @dot_ids ||= { }
      out.puts <<"END"
digraph g {
  graph [
    rankdir = "LR"
    // rankdir = "TB" // Error: Edge length 94897.000000 larger than maximum 65535 allowed.
  ];
  node [
    fontsize = "10"
    // fontstyle = ""
    shape = "ellipse"
  ];
  edge [
  ];
END
      to_dot_node(self, out, &blk)
      to_dot_edge(self, out, &blk)
      out.puts "\n}\n"
    else
      raise TypeError, "#{obj.class}"
    end
  end

  def to_dot_node obj, out = nil, &blk
    # $stderr.puts "  to_dot_node #{obj.class} #{obj.object_id} #{obj.label rescue nil}"
    case obj
    when AssemblyCallGraph
      obj.procedures.each do | x |
        to_dot_node(x, out, &blk)
      end

    when Procedure
      return if block_given? && ! yield(obj)
      return if @dot_ids[obj] or obj.extern?
      dot_id = @dot_ids[obj] = "#{obj.label}"
      out.puts <<"END"
subgraph "cluster_#{dot_id}" {
   style=filled;
   color=white;
END
      obj.regions.each do | region  |
        to_dot_node(region, out)
      end

      out.puts <<"END"
}
END

    when Region
      return if @dot_ids[obj]
      dot_id = @dot_ids[obj] = obj.label
      dot_label = ''
      dot_label << "<l0>#{dot_id}: (#{obj.isns.size} isns)\\l"
      obj.lines.each do | isn |
        if field = to_dot_node(isn)
          f = "l#{isn.line}"
          @dot_ids[isn] ||= "\"#{dot_id}\":#{f}"
          dot_label << "|<#{f}>#{field}\\l"
        end
      end
      out.puts <<"END"
"#{dot_id}" [
  label = "#{dot_label}"
  shape = "record"
];
END

    when Instruction::Label
      nil

    when Instruction
      # $stderr.puts "Isn #{obj}"
      obj.to_s.
        sub(/\s*\n/, '').
        gsub(/\t/, '    ').
        gsub(/[\{\}\|\s\<\>]/) do | m |
        '\\' + m
      end

    end
  end

  def to_dot_edge obj, out = nil, &blk
    case obj
    when AssemblyCallGraph
      obj.procedures.each do | p |
        to_dot_edge(p, out, &blk)
      end

    when Procedure
      return if block_given? && ! yield(obj)
      obj.regions.each do | r |
        to_dot_edge(r, out)
      end
      
    when Region
      obj.isns.each do | isn |
        to_dot_edge(isn, out)
        if ni = isn.next
          src = @dot_ids[isn] or raise "no @dot_ids for #{isn}"
          if dst = @dot_ids[ni]
            dst = "#{dst}:w"
            style = nil # "style=dashed"
            out.puts <<"END"
    #{src}:s -> #{dst} [ #{style} ];
END
          else
            warn "No @dot_ids for #{ni}"
          end
        end
      end

    when Instruction::AbstractJump, Instruction::Call
      src = @dot_ids[obj] or raise "no @dot_ids for #{obj}"
      if dst = @dot_ids[obj.dst_code]
        dst = "#{dst}:w"
        style = "style=dashed"
      else
        dst = "\"#{obj.owner.owner.label}::#{obj.dst_label}\""
        style = "style=dotted"
      end
      out.puts <<"END"
    #{src}:e -> #{dst} [ #{style} ];
END

    end
  end

end # class


require 'rubygems'
gem 'ruby-debug'
require 'ruby-debug'
require 'pp'
acg = AssemblyCallGraph.new
s_file = "src/smal.s"
File.open(s_file) do | io |
  acg.parse(io)
end
if false
  acg.procedures.each do | p |
    puts p unless p.empty?
  end
end
puts "====================="
s_dot_file = "#{s_file}.dot"
File.open(s_dot_file, "w+") do | io |
  acg.to_dot(nil, io) do | p |
    [ :_smal_alloc, :_smal_alloc_p, :_smal_buffer_alloc_object, :_smal_type_alloc_buffer ].include?(p.label)
  end
end
if true
  s_dot_svg_file = "#{s_dot_file}.svg"
  system("dot -Tsvg #{s_dot_file} > #{s_dot_svg_file}") and
  system("open -a Firefox #{s_dot_svg_file}")
end

